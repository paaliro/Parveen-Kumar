/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 optimized-room.glb
*/

import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { EffectComposer, SelectiveBloom } from "@react-three/postprocessing";
import { BlendFunction } from "postprocessing";
import * as THREE from "three";
import { GroupProps } from '@react-three/fiber';
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    [key: string]: THREE.Mesh & { geometry: THREE.BufferGeometry };
  };
  materials: {
    [key: string]: THREE.Material;
  };
};

interface RoomProps extends GroupProps { }

export const Room: React.FC<RoomProps> = (props) => {
  // const { nodes, materials } = useGLTF("/models/optimized-room.glb") as GLTFResult;
  const gltf = useGLTF("/models/optimized-room.glb") as unknown as GLTFResult;
  const { nodes, materials } = gltf;

  const screensRef = useRef<THREE.Mesh>(null);

  const matcapTexture = useTexture("/images/textures/mat1.png");

  const curtainMaterial = new THREE.MeshPhongMaterial({ color: "#d90429" });
  const bodyMaterial = new THREE.MeshPhongMaterial({ map: matcapTexture });
  const tableMaterial = new THREE.MeshPhongMaterial({ color: "#582f0e" });
  // const radiatorMaterial = new THREE.MeshPhongMaterial({ color: "#fff" });
  const compMaterial = new THREE.MeshStandardMaterial({ color: "#fff" });
  // const pillowMaterial = new THREE.MeshPhongMaterial({ color: "#8338ec" });
  const chairMaterial = new THREE.MeshPhongMaterial({ color: "#000" });

  return (
    <group {...props} dispose={null}>
      <EffectComposer>
        <SelectiveBloom
          selection={screensRef}
          intensity={1.5}
          luminanceThreshold={0.2}
          luminanceSmoothing={0.9}
          blendFunction={BlendFunction.ADD}
        />
      </EffectComposer>

      {/* Example typed usage of meshes */}
      <mesh
        geometry={nodes._________6_blinn1_0.geometry}
        material={curtainMaterial}
      />
      <mesh geometry={nodes.body1_blinn1_0.geometry} material={bodyMaterial} />
      <mesh geometry={nodes.cabin_blinn1_0.geometry} material={tableMaterial} />
      <mesh
        geometry={nodes.chair_body_blinn1_0.geometry}
        material={chairMaterial}
      />
      <mesh geometry={nodes.comp_blinn1_0.geometry} material={compMaterial} />
      <mesh
        ref={screensRef}
        geometry={nodes.emis_lambert1_0.geometry}
        material={materials.lambert1}
      />

      {/* Render all other meshes */}
      {Object.entries(nodes).map(([key, node]) => {
        if (
          [
            "_________6_blinn1_0",
            "body1_blinn1_0",
            "cabin_blinn1_0",
            "chair_body_blinn1_0",
            "comp_blinn1_0",
            "emis_lambert1_0",
          ].includes(key)
        )
          return null;

        return (
          <mesh
            key={key}
            geometry={node.geometry}
            material={materials.blinn1 ?? materials.phong1 ?? new THREE.MeshBasicMaterial()}
          />
        );
      })}
    </group>
  );
};

useGLTF.preload("/models/optimized-room.glb");
